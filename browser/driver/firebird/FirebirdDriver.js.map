{"version":3,"sources":["../browser/src/driver/firebird/FirebirdDriver.ts"],"names":[],"mappings":"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","file":"FirebirdDriver.js","sourcesContent":["import { Driver } from \"../Driver\";\r\nimport { ColumnType } from \"../types/ColumnTypes\";\r\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\";\r\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\";\r\nimport { SchemaBuilder } from \"../../schema-builder/SchemaBuilder\";\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\r\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\";\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\";\r\nimport { Connection } from \"../../connection/Connection\";\r\nimport { FirebirdConnectionOptions } from \"./FirebirdConnectionOptions\";\r\nimport { Database, Options, ConnectionPool } from \"node-firebird\";\r\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\r\nimport { FirebirdQueryRunner } from \"./FirebirdQueryRunner\";\r\nimport { DateUtils } from \"../../util/DateUtils\";\r\nimport { OrmUtils } from \"../../util/OrmUtils\";\r\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\r\n\r\nexport class FirebirdDriver implements Driver {\r\n    options: FirebirdConnectionOptions;\r\n    database?: string | undefined;\r\n    isReplicated: boolean;\r\n    treeSupport: boolean;\r\n\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"smallint\",\r\n        \"bigint\",\r\n        \"float\",\r\n        \"double precision\",\r\n        \"decimal\",\r\n        \"numeric\",\r\n        \"date\",\r\n        \"timestamp\",\r\n        \"time\",\r\n        \"char\",\r\n        \"character\",\r\n        \"varchar\",\r\n        \"blob\"\r\n    ];\r\n\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        \"varchar\": { length: 255 },\r\n        \"char\": { length: 1 },\r\n        \"decimal\": { precision: 10, scale: 0 },\r\n        \"float\": { precision: 12 },\r\n        \"double\": { precision: 22 },\r\n        \"int\": { width: 11 },\r\n        \"smallint\": { width: 6 },\r\n        \"bigint\": { width: 20 }\r\n    };\r\n\r\n    spatialTypes: ColumnType[] = [];\r\n\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"char\",\r\n        \"varchar\",\r\n        \"character\"\r\n    ];\r\n\r\n    withPrecisionColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"numeric\"\r\n    ];\r\n\r\n    withScaleColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"numeric\"\r\n    ];\r\n\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"timestamp\",\r\n        createDatePrecision: 6,\r\n        createDateDefault: \"NOW\",\r\n        updateDate: \"timestamp\",\r\n        updateDatePrecision: 6,\r\n        updateDateDefault: \"NOW\",\r\n        deleteDate: \"timestamp\",\r\n        deleteDatePrecision: 6,\r\n        deleteDateNullable: true,\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationId: \"int\",\r\n        migrationName: \"varchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"varchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"blob\",\r\n        cacheResult: \"blob\",\r\n        metadataType: \"varchar\",\r\n        metadataDatabase: \"varchar\",\r\n        metadataSchema: \"varchar\",\r\n        metadataTable: \"varchar\",\r\n        metadataName: \"varchar\",\r\n        metadataValue: \"blob sub_type text\",\r\n    };\r\n    connection: Connection;\r\n    /**\r\n     * Database connection object from node-firebird\r\n     */\r\n    firebird: any;\r\n    /**\r\n     * Connection options for firebird connection\r\n     */\r\n    firebirdOptions: Options;\r\n\r\n    /**\r\n     * Database pool connection object from node-firebird\r\n     */\r\n    firebirdPool: ConnectionPool;\r\n\r\n    /**\r\n     * Firebrid database (no pooling)\r\n     */\r\n    firebirdDatabase: Database;\r\n\r\n    constructor(connection: Connection) {\r\n        this.connection = connection;\r\n        this.options = connection.options as FirebirdConnectionOptions;\r\n        this.firebirdOptions = connection.options as Options;\r\n\r\n        // load mysql package\r\n\t\t// TODO: Temporary workaround for https://github.com/typeorm/typeorm/issues/4210\r\n        this.firebird = require(\"node-firebird\");\r\n    }\r\n\r\n    async connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            if (this.options.pooling) {\r\n                this.firebirdPool = this.firebird.pool(5, this.firebirdOptions);\r\n                this.firebirdPool.get((err, database) => {\r\n                    if (err) {\r\n                        fail(err);\r\n                    }\r\n                    this.firebirdDatabase = database;\r\n                    ok();\r\n                });\r\n            } else {\r\n                this.firebird.attachOrCreate(this.firebirdOptions, (err: any, database: Database) => {\r\n                    if (err) {\r\n                        fail(err);\r\n                    }\r\n                    this.firebirdDatabase = database;\r\n                    ok();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            if (this.options.pooling) {\r\n                this.firebirdPool.destroy();\r\n                ok();\r\n            } else {\r\n                this.firebirdDatabase.detach(() => ok());\r\n            }\r\n        });\r\n    }\r\n\r\n    createSchemaBuilder(): SchemaBuilder {\r\n        return new RdbmsSchemaBuilder(this.connection);\r\n    }\r\n    createQueryRunner(mode: \"master\" | \"slave\"): QueryRunner {\r\n        return new FirebirdQueryRunner(this);\r\n    }\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters];\r\n\r\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n\t\t\tlet spreadParam: boolean;\r\n            let value: any;\r\n\t\t\t\r\n            if (key.substr(0, 4) === \":...\") {\r\n\t\t\t\tspreadParam = true;\r\n                value = parameters[key.substr(4)];\r\n            } else {\r\n\t\t\t\tspreadParam = false;\r\n                value = parameters[key.substr(1)];\r\n            }\r\n\r\n            if (value instanceof Function) {\r\n                return value();\r\n            } else if (spreadParam) {\r\n                value.forEach((param: any) => escapedParameters.push(param));\r\n                return new Array(value.length).fill('?').join(', ');\r\n            } else {\r\n                escapedParameters.push(value);\r\n                return \"?\";\r\n            }\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\t\r\n    escape(columnName: string): string {\r\n        return columnName.toUpperCase();\r\n    }\r\n\t\r\n    buildTableName(tableName: string, schema?: string | undefined, database?: string | undefined): string {\r\n        return tableName.toUpperCase();\r\n    }\r\n\t\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata) {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\r\n\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0;\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value);\r\n\r\n        } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            return DateUtils.mixedDateToDate(value);\r\n\r\n        }\r\n\r\n        return value;\r\n    }\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata) {\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            value = value ? true : false;\r\n\r\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            value = DateUtils.normalizeHydratedDate(value);\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value);\r\n\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\r\n\r\n        return value;\r\n    }\r\n    normalizeType(column: { type?: string | BooleanConstructor | DateConstructor | NumberConstructor | StringConstructor | undefined; length?: string | number | undefined; precision?: number | null | undefined; scale?: number | undefined; isArray?: boolean | undefined; }): string {\r\n        if (column.type === Number || column.type === \"integer\") {\r\n            return \"int\";\r\n\r\n        } else if (column.type === String || column.type === \"nvarchar\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === Date) {\r\n            return \"datetime\";\r\n\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n\r\n        } else if (column.type === Boolean) {\r\n            return \"char\";\r\n\r\n        } else if (column.type === \"numeric\" || column.type === \"dec\") {\r\n            return \"numeric\";\r\n\r\n        } else if (column.type === \"uuid\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\r\n            return \"blob\";\r\n\r\n        } else {\r\n            return column.type as string || \"\";\r\n        }\r\n    }\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\r\n        const defaultValue = columnMetadata.default;\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return \"\" + defaultValue;\r\n\r\n        } else if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue === true ? \"T\" : \"F\";\r\n\r\n        } else if (typeof defaultValue === \"function\") {\r\n            return defaultValue();\r\n\r\n        } else if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`;\r\n\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\r\n    }\r\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\r\n        if (column.length)\r\n        return column.length.toString();\r\n\r\n        switch (column.type) {\r\n            case String:\r\n            case \"varchar\":\r\n                return \"255\";\r\n            case \"uuid\":\r\n                return \"36\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type;\r\n\r\n        // used 'getColumnLength()' method, because Firebird requires column length for `varchar`, `nvarchar` and `varbinary` data types\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`;\r\n\r\n        } else if (column.width) {\r\n            type += `(${column.width})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\r\n            type += `(${column.precision},${column.scale})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined) {\r\n            type += `(${column.precision})`;\r\n        }\r\n\r\n        if (column.isArray)\r\n            type += \" array\";\r\n\r\n        return type;\r\n    }\r\n    obtainMasterConnection(): Promise<any> {\r\n        return this.connect();\r\n    }\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return this.connect();\r\n    }\r\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any): ObjectLiteral | undefined {\r\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\r\n            let value: any;\r\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\r\n                value = insertResult.insertId;\r\n            }\r\n\r\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n        }, {} as ObjectLiteral);\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\r\n    }\r\n\r\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\r\n        return columnMetadatas.filter(columnMetadata => {\r\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\r\n            if (!tableColumn)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            return tableColumn.name !== columnMetadata.databaseName\r\n                || tableColumn.type !== this.normalizeType(columnMetadata)\r\n                || tableColumn.length !== columnMetadata.length\r\n                || tableColumn.width !== columnMetadata.width\r\n                || tableColumn.precision !== columnMetadata.precision\r\n                || tableColumn.scale !== columnMetadata.scale\r\n                || tableColumn.zerofill !== columnMetadata.zerofill\r\n                || tableColumn.unsigned !== columnMetadata.unsigned\r\n                || tableColumn.asExpression !== columnMetadata.asExpression\r\n                || tableColumn.generatedType !== columnMetadata.generatedType\r\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\r\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\r\n                || tableColumn.isNullable !== columnMetadata.isNullable\r\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\r\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\r\n        });\r\n    }\r\n    isReturningSqlSupported(): boolean {\r\n        return false;\r\n    }\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false;\r\n    }\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"?\";\r\n    }\r\n\r\n\r\n}\r\n"],"sourceRoot":"../.."}